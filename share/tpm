#
#   Copyright (C) 2022, 2023 SUSE LLC
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Written by Olaf Kirch <okir@suse.com>

FDE_DEFAULT_AUTHORIZED_POLICY="authorized-policy"
FDE_SNAPSHOT_NAME="tpm-snapshot"

##################################################################
# Check whether a TPM is present and working reasonably well
##################################################################
function tpm_present_and_working {

    # Try to fail more gracefully when there's no TPM (esp on platforms
    # that do not support TPM devices at all).
    if [ ! -d /sys/class/tpm ]; then
	fde_trace "There do not seem to be any TPM devices."
    fi

    if ! pcr-oracle self-test; then
	fde_trace "This system does not have a TPM2 chip. Full disk encryption with TPM protection not available"
	return 1
    fi

    return 0
}

function tpm_get_rsa_key_size {

    declare -g __fde_rsa_key_size

    if [ -n "$__fde_rsa_key_size" ]; then
	echo "$__fde_rsa_key_size"
	return
    fi

    if [ -n "$FDE_RSA_KEY_SIZE" ]; then
	# TODO validate $FDE_RSA_KEY_SIZE
	__fde_rsa_key_size="${FDE_RSA_KEY_SIZE}"
	echo "$__fde_rsa_key_size"
	return
    fi

    # Check if pcr-oracle supports rsa-test
    # If pcr-oracle prints "Unknown action", fall back to default.
    if pcr-oracle rsa-test 2>&1 | grep -q "Unknown action"; then
	__fde_rsa_key_size="2048"
	echo "$__fde_rsa_key_size"
	return
    fi

    # Find the highest supported RSA key size
    sizes_to_test=$(bootloader_rsa_sizes)

    for size in ${sizes_to_test}; do
	if pcr-oracle --rsa-bits ${size} rsa-test > /dev/null 2>&1; then
	    __fde_rsa_key_size="${size}"
	    echo "$__fde_rsa_key_size"
	    return
	fi
    done

    fde_trace "Failed to find a valid RSA key size. Fall back to 2048"
    __fde_rsa_key_size="2048"
    echo "$__fde_rsa_key_size"
}

function tpm_snapshot {
    # TODO Add an ID to the snapshot name
    local snapshot=${FDE_SNAPSHOT_NAME}
    local tmpdir=$(fde_make_tempfile snapshot)

    mkdir -p ${tmpdir}

    local stop_event=$(bootloader_stop_event)

    if [ -z "$FDE_LOG_DIR" ]; then
	FDE_LOG_DIR=/var/log/fde
    fi

    if [ ! -d "$FDE_LOG_DIR" ]; then
	fde_trace "${FDE_LOG_DIR} doesn't exist. Skip snapshot creation"
	return 0
    fi

    pcr-oracle \
		--from eventlog \
		--create-testcase ${tmpdir}/${snapshot} \
		--stop-event "$stop_event" \
		--after \
		predict "$FDE_SEAL_PCR_LIST" > ${tmpdir}/predicted-pcr.txt

    mv ${tmpdir}/predicted-pcr.txt ${tmpdir}/${snapshot}/predicted-pcr.txt
    cp /proc/sys/kernel/random/boot_id ${tmpdir}/${snapshot}/boot_id

    tar Jcf ${FDE_LOG_DIR}/${snapshot}.tar.xz -C ${tmpdir} ${snapshot}

    rm -rf ${tmpdir}
}

function tpm_pcr_usage {
    local pcr=$1

    # References:
    # https://uapi-group.org/specifications/specs/linux_tpm_pcr_registry/
    # https://tianocore-docs.github.io/edk2-TrustedBootChain/release-1.00/3_TCG_Trusted_Boot_Chain_in_EDKII.html
    declare -A pcr_usage_strs
    pcr_usage_strs["0"]="[UEFI] Core system firmware executable code"
    pcr_usage_strs["1"]="[UEFI] Core system firmware data/host platform configuration"
    pcr_usage_strs["2"]="[UEFI] Extended or pluggable executable code"
    pcr_usage_strs["3"]="[UEFI] Extended or pluggable firmware data"
    pcr_usage_strs["4"]="[UEFI,shim,GRUB2,systemd] Boot loader and additional drivers"
    pcr_usage_strs["5"]="[UEFI] GPT/Partition table"
    pcr_usage_strs["6"]="[UEFI] Host Platform Manufacturer Specific"
    pcr_usage_strs["7"]="[UEFI] Secure Boot Policy"
    pcr_usage_strs["8"]="[GRUB2] Commands and kernel command line"
    pcr_usage_strs["9"]="[GRUB2] All files read (grub.cfg, kernel, initrd)"
    pcr_usage_strs["10"]="[IMA] Protection of the IMA measurement log"
    pcr_usage_strs["11"]="[systemd] All components of unified kernel images"
    pcr_usage_strs["12"]="[systemd] Kernel command line, system credentials and system configuration images"
    pcr_usage_strs["13"]="[systemd] All system extension images for the initrd"
    pcr_usage_strs["14"]="[shim] MOK certificates and hashes"

    echo "${pcr_usage_strs[${pcr}]}"
}

function tpm_inspect {
    # TODO Add an ID to the snapshot name
    local snapshot=${FDE_SNAPSHOT_NAME}
    local snapshot_file="${FDE_LOG_DIR}/${snapshot}.tar.xz"
    local tmpdir=$(fde_make_tempfile inspect)
    local stop_event=$(bootloader_stop_event)
    local sys_boot_id="/proc/sys/kernel/random/boot_id"
    local pcr_out
    local pcr_list
    local mismatch_lines
    local ret

    # FIXME use bootloader specific snapshot
    local grubsnapshot="/sys/firmware/efi/efivars/GrubPcrSnapshot-7ce323f2-b841-4d30-a0e9-5474a76c9a3f"

    if [ ! -r ${grubsnapshot} -o ! -r ${snapshot_file} ]; then
	fde_trace "snapshot not available"
	return 1
    fi

    mkdir -p ${tmpdir}

    tar xf ${snapshot_file} -C ${tmpdir}

    pcr_out=$(pcr-oracle \
		--from eventlog \
		--verify snapshot \
		--replay-testcase ${tmpdir}/${snapshot} \
		--stop-event "${stop_event}" \
		--after \
		predict ${FDE_SEAL_PCR_LIST} 2>&1)
    ret=$?

    if [ $ret -eq 0 ]; then
	echo "Sealed PCR matching the current settings"
	rm -rf ${tmpdir}
	return 0
    fi

    # Check the errors from pcr-oracle

    # Interpret the pcr-oracle output
    mismatch_lines=$(grep MISMATCH <<<${pcr_out})
    if [ -z "$mismatch_lines" ]; then
	fde_trace "$pcr_out"
	rm -rf ${tmpdir}
	return 1
    fi
    pcr_list=$(echo ${mismatch_lines} | cut -d' ' -f 1 | cut -d':' -f 2)

    # Check the boot ID and see if the predicted PCR values are for the next
    # boot or not.
    if diff ${tmpdir}/${snapshot}/boot_id ${sys_boot_id} > /dev/null; then
	echo "Sealed key authorized for the next boot"
	rm -rf ${tmpdir}
	return 0
    fi

    fde_trace "PCR mismatch detected:"
    for pcr in ${pcr_list}; do
	fde_trace "* PCR ${pcr}: $(tpm_pcr_usage ${pcr})"
    done

    # Check if pcr-oracle support '--compare-current'.
    if pcr-oracle --compare-current 2>&1 | grep -q "unrecognized option"; then
	return 1
    fi

    fde_trace ""
    fde_trace ""

    # List the detailed TPM events of the affected PCR
    pcr_out=$(pcr-oracle -d \
		--from eventlog \
		--replay-testcase ${tmpdir}/${snapshot} \
		--compare-current \
		--stop-event "${stop_event}" \
		--after \
		predict $(echo ${pcr_list} | paste -s -d ',') 2>&1)
    fde_trace ${pcr_out}

    rm -rf ${tmpdir}
    return 1
}

function tpm_platform_parameters {
    declare -g __fde_platform_param

    if [ -n "$__fde_platform_param" ]; then
	echo "$__fde_platform_param"
	return
    fi

    # Check if pcr-oracle supports "--target-platform"
    if pcr-oracle --target-platform 2>&1 | grep -q "unrecognized option"; then
	__fde_platform_param="--key-format tpm2.0"
	echo "$__fde_platform_param"
	return
    fi

    __fde_platform_param=$(bootloader_platform_parameters)
    echo "$__fde_platform_param"
}

function tpm_seal_key {

    local secret=$1
    local sealed_secret=$2

    local extra_opts=$(tpm_platform_parameters)
    local rsa_size=$(tpm_get_rsa_key_size)

    if [ -n "$rsa_size" -a "$rsa_size" -ne 2048 ]; then
	extra_opts="${extra_opts} --rsa-bits ${rsa_size}"
    fi

    local stop_event=$(bootloader_stop_event)

    echo "Sealing secret against PCR policy covering $FDE_SEAL_PCR_LIST" >&2
    pcr-oracle ${extra_opts} \
			--input "$secret" --output "$sealed_secret" \
			--algorithm "$FDE_SEAL_PCR_BANK" \
			--from eventlog \
			--stop-event "$stop_event" \
			--after \
			seal-secret \
			"$FDE_SEAL_PCR_LIST"

    tpm_snapshot
}

function tpm_test {

    key_size=$1

    local extra_opts=$(tpm_platform_parameters)

    secret=$(fde_make_tempfile secret)
    dd if=/dev/zero of=$secret bs=$key_size count=1 status=none >&2

    secret=$(fde_make_tempfile secret)
    sealed_secret=$(fde_make_tempfile sealed_secret)
    recovered=$(fde_make_tempfile recovered)
    result=1

    dd if=/dev/zero of=$secret bs=$key_size count=1 status=none >&2

    fde_trace "Testing TPM seal/unseal"
    pcr-oracle ${extra_opts} \
	--algorithm "$FDE_SEAL_PCR_BANK" \
        --input "$secret" \
        --output "$sealed_secret" \
        --from current \
        seal-secret "$FDE_SEAL_PCR_LIST"

    pcr-oracle ${extra_opts} \
	--algorithm "$FDE_SEAL_PCR_BANK" \
        --input "$sealed_secret" \
        --output "$recovered" \
        unseal-secret

    if ! cmp "$secret" "$recovered"; then
        fde_trace "BAD: Unable to recover original secret"
        fde_trace "TPM seal/unseal does not seem to work; please take me to a parallel universe"
    else
        fde_trace "TPM seal/unseal works"
	result=0
    fi

    return $result
}

function tpm_seal_secret {

    local secret="$1"
    local sealed_secret="$2"
    local authorized_policy="$3"

    local extra_opts=$(tpm_platform_parameters)
    local rsa_size=$(tpm_get_rsa_key_size)

    if [ -n "$rsa_size" -a "$rsa_size" -ne 2048 ]; then
	extra_opts="${extra_opts} --rsa-bits ${rsa_size}"
    fi

    # If we are expected to use an authorized policy, seal the secret
    # against that, using pcr-oracle rather than the tpm2 tools
    if [ -n "$authorized_policy" ]; then
	pcr-oracle ${extra_opts} \
			--authorized-policy "$authorized_policy" \
			--input $secret \
			--output $sealed_secret \
			seal-secret
	return $?
    fi

    # The sealed key that grub expects is just the concatenation of
    # TPM2B_PUBLIC and a TPM2B containing the private key portion
    # This may not work with systemd-boot. If systemd-boot requires
    # public/private in separate files, we should probably add
    # a subcommand "split-secret" to pcr-oracle.
    if ! tpm_seal_key $secret $sealed_secret >&2; then
	rm -f $sealed_secret
	# FIXME: this should be an error dialog.
	# Let's hope the user has set a recovery password
	echo "Failed to seal LUKS encryption key" >&2
	return 1
    fi
}

##################################################################
# Authorized policy support
##################################################################
function tpm_set_authorized_policy_paths {

    policy_name="$1"

    # Note, caller is expected to set FDE_CONFIG_DIR
    # (usually to $rootdir/etc/fde).
    declare -g FDE_AP_CONFIG_DIR="$FDE_CONFIG_DIR/$policy_name"
    declare -g FDE_AP_SECRET_KEY="$FDE_AP_CONFIG_DIR/secret-key.pem"
    declare -g FDE_AP_AUTHPOLICY="$FDE_AP_CONFIG_DIR/authorized-policy.tpm"
    declare -g FDE_AP_PUBLIC_KEY="$FDE_AP_CONFIG_DIR/public-key.tpm"
    declare -g FDE_AP_SEALED_SECRET="$FDE_AP_CONFIG_DIR/sealed.tpm"

    mkdir -p -m 755 "$FDE_AP_CONFIG_DIR"
}

function tpm_create_authorized_policy {

    local secret_key="$1"
    local output_policy="$2"
    local public_key="$3"

    # Generate the private key if it does not exist
    local extra_opts=
    if [ ! -f "$secret_key" ]; then
	local rsa_size=$(tpm_get_rsa_key_size)

	extra_opts="--rsa-generate-key"
	if [ -n "$rsa_size" -a "$rsa_size" -ne 2048 ]; then
	    extra_opts="${extra_opts} --rsa-bits ${rsa_size}"
	fi
    fi

    pcr-oracle $extra_opts \
        --private-key "$secret_key" \
        --authorized-policy $output_policy \
	--algorithm $FDE_SEAL_PCR_BANK \
        create-authorized-policy $FDE_SEAL_PCR_LIST
    if [ $? -ne 0 ]; then
	return 1
    fi

    # Store the public key in a format suitable for feeding it to the TPM
    if [ -n "$public_key" ]; then
	pcr-oracle \
		--private-key "$secret_key" \
		--public-key "$public_key" \
		store-public-key
	if [ $? -ne 0 ]; then
	    return 1
	fi
    fi
}

function tpm_authorize {

    local private_key_file="$1"
    local sealed_key_file="$2"
    local signed_key_file="$3"

    local extra_opts=$(tpm_platform_parameters)
    local stop_event=$(bootloader_stop_event)

    pcr-oracle ${extra_opts} \
		--algorithm "$FDE_SEAL_PCR_BANK" \
                --private-key "$private_key_file" \
                --from eventlog \
		--stop-event "$stop_event" \
		--after \
		--input "$sealed_key_file" \
                --output "$signed_key_file" \
                sign "$FDE_SEAL_PCR_LIST"

    tpm_snapshot
}
